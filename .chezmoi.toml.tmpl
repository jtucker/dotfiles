{{- $email := "" -}}
{{- $work := false -}}
{{- $docker := false -}}

{{- if (hasKey . "email") -}}
{{-   $email = .email -}}
{{- else -}}
{{-   $email = promptString "Email address for configs" -}}
{{- end -}}

{{- if (hasKey . "work") -}}
{{-   $work = .work -}}
{{- else -}}
{{-   $work = promptBool "Is this a work machine (Y/N)" -}}
{{- end -}}

{{- $machine := "desktop" }}
{{- if eq .chezmoi.os "windows" }}
{{-  $machine = (output "powershell.exe" "-NoProfile" "-NonInteractive" "-Command" "if ((Get-CimInstance -Class Win32_Battery | Measure-Object).Count -gt 0) { Write-Output 'laptop' } else { Write-Output 'desktop' }") | trim }}
{{- end }}

{{- $wsl := and (eq .chezmoi.os "linux") (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
{{- $wsl_systemd := false -}}
{{- $wsl_userprofile := "" -}}
{{- if $wsl -}}
{{- $wsl_systemd = promptBoolOnce . "systemd" "Using systemd" -}}
{{-   if env "USERPROFILE" | empty | not -}}
{{- $wsl_userprofile = env "USERPROFILE" -}}
{{-   else if expandenv "/mnt/c/Users/$USER" | stat -}}
{{- $wsl_userprofile = expandenv "/mnt/c/Users/$USER" -}}
{{-   end -}}
{{- end -}}

encryption = "age"
mode = "file"
progress = true

{{- if eq .chezmoi.os "windows" }}
[hooks.read-source-state.pre]
  command = "powershell"
  args = ["-NoLogo", "-Command", "& {Set-Location $env:HOMEPATH/.local/share/chezmoi; ./.install-windows-prereqs.ps1}"]

# Hack to run powershell scripts before 
# powershell core is installed
[interpreters.ps5]
   command = "powershell"
   args = ["-NoLogo"]

{{- end }}

[data]
email = {{ $email | quote }}
work = {{ $work }}
machine = {{ $machine | quote }}
editor = "code"

[interpreters.ps1]
   command = "pwsh"
   args = ["-NoLogo"]

[cd]
   command = "pwsh"
   args = ["-NoLogo", "-NoExit", "-Command", "& {Set-Location $env:HOMEPATH/.local/share/chezmoi}"]

[edit]
   command = "code"
   args = [
      "--wait"
   ]
{{ if eq .chezmoi.os "windows" }}
[merge]
    command = "pwsh"
    args = ["-Command", "cp {{ `{{ .Target }}` }} {{ `{{ .Target }}` }}.base && code --wait --new-window --merge {{ `{{ .Destination }}` }} {{ `{{ .Target  }}` }} {{ `{{ .Target }}` }}.base {{ `{{ .Source }}` }}"]
{{ else }}
[merge]
   command = "code"
   args = [
      "--wait",
      "--new-window",
      "--merge",
      "{{ `{{ .Destination }}` }}",
      "{{ `{{ .Target }}` }}",
      "{{ `{{ .Source }}` }}"
   ]
{{ end }}

[diff]
   exclude = ["scripts"]
   command = "code"
   args = [
      "--wait",
      "--diff",
      "{{ `{{ .Destination }}` }}",
      "{{ `{{ .Target }}` }}"
   ]

[git]
   autoCommit = true
